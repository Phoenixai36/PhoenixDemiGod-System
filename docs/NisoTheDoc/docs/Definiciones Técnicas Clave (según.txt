Definiciones Técnicas Clave (según requerimientos del sistema):

Roo Code: Extensión de VS Code para desarrollo asistido por IA, que automatiza generación de código, orquestación de flujos y validación en entornos locales. Tools: Integración con Ollama para prompts locales, scripts bash para automatización, extensión VS Code API para manipulación de archivos. Lógica ideal: Analizar prompt → generar estructura → validar sintaxis → ejecutar tests → reportar en terminal.

Arquitectura No-Transformer: Diseño de sistema IA que evita modelos basados en transformers para priorizar eficiencia local y privacidad, usando embeddings alternativos y routers multimodelo. Tools: Keras para embeddings, FastAPI para routing. Lógica ideal: Router selecciona modelo por tarea → procesa input sin transformers → output optimizado para hardware local.

Monorepo Poliglota: Repositorio único que soporta múltiples lenguajes (Python, Bash, YAML, JSON) para facilitar gestión y CI/CD. Tools: Poetry para dependencias Python, Makefile para comandos cross-language. Lógica ideal: Centralizar código → definir workspaces → automatizar builds multi-lenguaje.

IaC (Infrastructure as Code): Práctica de definir infraestructura mediante código versionable. Tools: Terraform para cloud, Ansible para on-prem, Helm para Kubernetes. Lógica ideal: Declarar recursos → aplicar cambios idempotentes → validar estado post-despliegue.

Prompt Detallado para Ejecución:

text
[SYSTEM]
Eres Roo Code, un asistente de desarrollo en VS Code para Phoenix DemiGod v8.7. Tu tarea es orquestar la creación de una arquitectura no-transformer integrando AutoGen y Rasa, basada en el árbol de directorios proporcionado. Mantén realismo: enfócate en escalabilidad local primero, con eye en subvenciones como CDTI Misiones IA 2025 (abierta enero 2025, hasta 300k€ para IA multiagente) y ENISA EBT (hasta 300k€ para startups tech). Estrategia por fases: Fase 1 (3 meses) - base funcional; Fase 2 (mes 5) - integraciones; Fases 3-4 (5-12 meses) - escalado con Kubernetes y dashboard para inversores.

[USER]
Genera el árbol de directorios completo para Phoenix DemiGod v8.7 (no-transformer) + integraciones AutoGen & Rasa. Incluye todos subarchivos con contenido inicial placeholder. Pasos:
1. Crea carpeta raíz 'phoenix/'.
2. Genera subcarpetas y archivos según el árbol:
   - docker/: compose.yml (con servicios FastAPI, n8n, Windmill, DuckDB; volúmenes persistentes), env/ (dev.env, prod.env con placeholders).
   - infra/: terraform/ (main.tf para Proxmox/AWS), ansible/ (playbook.yml para provision on-prem), kubernetes/ (values.yaml para Helm charts fase 3).
   - apps/api/: main.py (FastAPI app con router multimodel), settings.py (Pydantic config), deps/ (auth.py), routes/ (health.py, inference.py, admin.py), models/ (schemas.py).
   - apps/autogen/: core/ (architect.py con Agent(role="Architect"), reviewer.py, tester.py, doc_writer.py), teams/ (dev_team.json con GroupChat v0.4), tools/ (git_tool.py, http_tool.py, shell_tool.py).
   - apps/rasa/: data/ (nlu.yml con 30 intents Phoenix, rules.yml, stories.yml), domain/ (base.yml, phoenix_slots.yml), actions/ (custom_actions.py), config.yml (pipelines spaCy + DIET).
   - apps/n8n/: projects/ (deploy_monitor.json, backup_stack.json con workflows visuales).
   - apps/windmill/: jobs/ (validate_hardware.wmill en Python, nightly_backup.wmill en TS).
   - libs/: common/ (logging.py, tracing.py, auth.py), embeddings/ (keras_vectors.py), cli/ (typer_scripts.py).
   - resources/: prompts/ (llm_templates.jinja), diagrams/ (architecture.drawio).
   - tests/: unit/ (test_api.py), integration/ (test_autogen.py).
   - scripts/: deploymentquicktest.sh (bash validación), PhoenixDemigodSystem.sh (setup one-liner).
   - docs/: ADR/ (adr001-rasa-vs-llm.md), roadmap.md (hitos por fase con oportunidades como Google for Startups AI First).
   - Archivos raíz: .env.example, pyproject.toml (Poetry con workspaces), Makefile (comandos make dev/qa), README.md (guía instalación).
3. Añade contenido inicial:
   - En compose.yml: servicios con healthchecks y depends_on.
   - En main.py: app = FastAPI(); routers condicionales no-transformer.
   - En autogen/architect.py: from autogen import Agent; class Architect(Agent): ...
   - En rasa/nlu.yml: intents Phoenix-specific (e.g., deploy_stack, debug_error).
   - En Makefile: targets para dev (docker up), qa (pytest + lint).
4. Valida: Ejecuta lint (Ruff), tests unitarios, y simula despliegue local con Podman.
5. Genera roadmap.md con fases: Fase 1 - MVP base; Fase 2 - AutoGen/Rasa; Fases 3-4 - Knative autoscaling y dashboard Superset para inversores (3 + padres).
6. Output: Confirma estructura creada, lista próximos pasos (e.g., solicitar CDTI enero 2025), y métricas iniciales (e.g., cobertura tests 70%).

[ASSISTANT]
Procesar prompt: Generar archivos, validar, reportar en terminal VS Code. Enfocarse en no-transformer: usar embeddings Keras en lugar de transformers. Integrar subvenciones actuales como Horizon Europe EIC (febrero 2025) para deep tech.