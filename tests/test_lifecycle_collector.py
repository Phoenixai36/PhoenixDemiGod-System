"""
Tests for container lifecycle metrics collector.
"""

import pytest
import asyncio
from datetime import datetime, timedelta
from unittest.mock import Mock, AsyncMock

from src.metrics.lifecycle import (
    ContainerLifecycleCollector,
    ContainerLifecycleEvent,
    ContainerEvent,
    ContainerState
)


class TestContainerLifecycleCollector:
    """Test cases for ContainerLifecycleCollector."""
    
    @pytest.fixture\n    def collector(self):\n        \"\"\"Create a lifecycle collector for testing.\"\"\"\n        return ContainerLifecycleCollector()\n    \n    @pytest.fixture\n    def sample_container_id(self):\n        \"\"\"Sample container ID for testing.\"\"\"\n        return \"test_container_123\"\n    \n    @pytest.fixture\n    def sample_container_name(self):\n        \"\"\"Sample container name for testing.\"\"\"\n        return \"test-app\"\n    \n    def test_initial_state(self, collector):\n        \"\"\"Test collector initial state.\"\"\"\n        assert len(collector.container_states) == 0\n        assert len(collector.event_history) == 0\n        assert not collector._monitoring\n        assert collector.get_name() == \"container_lifecycle\"\n    \n    def test_record_container_start_event(self, collector, sample_container_id, sample_container_name):\n        \"\"\"Test recording a container start event.\"\"\"\n        start_time = datetime.now()\n        event = ContainerLifecycleEvent(\n            container_id=sample_container_id,\n            container_name=sample_container_name,\n            event_type=ContainerEvent.STARTED,\n            timestamp=start_time\n        )\n        \n        collector.record_event(event)\n        \n        # Check event was recorded\n        assert len(collector.event_history) == 1\n        assert collector.event_history[0] == event\n        \n        # Check container state was updated\n        state = collector.get_container_state(sample_container_id)\n        assert state is not None\n        assert state.container_id == sample_container_id\n        assert state.container_name == sample_container_name\n        assert state.is_running is True\n        assert state.started_at == start_time\n        assert state.current_uptime_start == start_time\n        assert state.restart_count == 0\n    \n    def test_record_container_stop_event(self, collector, sample_container_id, sample_container_name):\n        \"\"\"Test recording a container stop event.\"\"\"\n        start_time = datetime.now()\n        stop_time = start_time + timedelta(minutes=30)\n        \n        # First start the container\n        start_event = ContainerLifecycleEvent(\n            container_id=sample_container_id,\n            container_name=sample_container_name,\n            event_type=ContainerEvent.STARTED,\n            timestamp=start_time\n        )\n        collector.record_event(start_event)\n        \n        # Then stop it\n        stop_event = ContainerLifecycleEvent(\n            container_id=sample_container_id,\n            container_name=sample_container_name,\n            event_type=ContainerEvent.STOPPED,\n            timestamp=stop_time,\n            exit_code=0\n        )\n        collector.record_event(stop_event)\n        \n        # Check container state\n        state = collector.get_container_state(sample_container_id)\n        assert state.is_running is False\n        assert state.stopped_at == stop_time\n        assert state.current_uptime_start is None\n        assert state.total_uptime == timedelta(minutes=30)\n        assert 0 in state.exit_codes\n    \n    def test_record_container_restart_event(self, collector, sample_container_id, sample_container_name):\n        \"\"\"Test recording a container restart event.\"\"\"\n        start_time = datetime.now()\n        restart_time = start_time + timedelta(minutes=15)\n        \n        # Start container\n        start_event = ContainerLifecycleEvent(\n            container_id=sample_container_id,\n            container_name=sample_container_name,\n            event_type=ContainerEvent.STARTED,\n            timestamp=start_time\n        )\n        collector.record_event(start_event)\n        \n        # Restart container\n        restart_event = ContainerLifecycleEvent(\n            container_id=sample_container_id,\n            container_name=sample_container_name,\n            event_type=ContainerEvent.RESTARTED,\n            timestamp=restart_time\n        )\n        collector.record_event(restart_event)\n        \n        # Check container state\n        state = collector.get_container_state(sample_container_id)\n        assert state.is_running is True\n        assert state.restart_count == 1\n        assert state.started_at == restart_time\n        assert state.current_uptime_start == restart_time\n        assert state.total_uptime == timedelta(minutes=15)\n    \n    @pytest.mark.asyncio\n    async def test_collect_metrics(self, collector, sample_container_id, sample_container_name):\n        \"\"\"Test collecting lifecycle metrics.\"\"\"\n        start_time = datetime.now()\n        \n        # Add a running container\n        start_event = ContainerLifecycleEvent(\n            container_id=sample_container_id,\n            container_name=sample_container_name,\n            event_type=ContainerEvent.STARTED,\n            timestamp=start_time\n        )\n        collector.record_event(start_event)\n        \n        # Collect metrics\n        metrics = await collector.collect_metrics()\n        \n        # Check that we have the expected metrics\n        metric_names = [m.name for m in metrics]\n        assert \"container_uptime_seconds\" in metric_names\n        assert \"container_restart_count\" in metric_names\n        assert \"container_running\" in metric_names\n        assert \"container_time_since_start_seconds\" in metric_names\n        assert \"containers_total\" in metric_names\n        assert \"containers_running\" in metric_names\n        assert \"containers_stopped\" in metric_names\n        \n        # Check specific metric values\n        uptime_metric = next(m for m in metrics if m.name == \"container_uptime_seconds\")\n        assert uptime_metric.value >= 0\n        assert uptime_metric.labels[\"container_id\"] == sample_container_id\n        assert uptime_metric.labels[\"status\"] == \"running\"\n        \n        restart_metric = next(m for m in metrics if m.name == \"container_restart_count\")\n        assert restart_metric.value == 0\n        \n        running_metric = next(m for m in metrics if m.name == \"container_running\")\n        assert running_metric.value == 1\n        \n        total_metric = next(m for m in metrics if m.name == \"containers_total\")\n        assert total_metric.value == 1\n    \n    def test_get_container_events_filtering(self, collector, sample_container_id, sample_container_name):\n        \"\"\"Test filtering container events.\"\"\"\n        base_time = datetime.now()\n        \n        # Add multiple events\n        events = [\n            ContainerLifecycleEvent(\n                container_id=sample_container_id,\n                container_name=sample_container_name,\n                event_type=ContainerEvent.STARTED,\n                timestamp=base_time\n            ),\n            ContainerLifecycleEvent(\n                container_id=sample_container_id,\n                container_name=sample_container_name,\n                event_type=ContainerEvent.STOPPED,\n                timestamp=base_time + timedelta(minutes=10)\n            ),\n            ContainerLifecycleEvent(\n                container_id=\"other_container\",\n                container_name=\"other-app\",\n                event_type=ContainerEvent.STARTED,\n                timestamp=base_time + timedelta(minutes=5)\n            )\n        ]\n        \n        for event in events:\n            collector.record_event(event)\n        \n        # Test filtering by container ID\n        container_events = collector.get_container_events(container_id=sample_container_id)\n        assert len(container_events) == 2\n        assert all(e.container_id == sample_container_id for e in container_events)\n        \n        # Test filtering by event type\n        start_events = collector.get_container_events(event_type=ContainerEvent.STARTED)\n        assert len(start_events) == 2\n        assert all(e.event_type == ContainerEvent.STARTED for e in start_events)\n        \n        # Test filtering by time\n        recent_events = collector.get_container_events(since=base_time + timedelta(minutes=3))\n        assert len(recent_events) == 2\n        \n        # Test limit\n        limited_events = collector.get_container_events(limit=1)\n        assert len(limited_events) == 1\n    \n    def test_get_restart_statistics(self, collector):\n        \"\"\"Test getting restart statistics.\"\"\"\n        base_time = datetime.now()\n        \n        # Create containers with different restart patterns\n        containers = [\n            (\"container1\", \"app1\", 0),  # No restarts\n            (\"container2\", \"app2\", 2),  # 2 restarts\n            (\"container3\", \"app3\", 1),  # 1 restart\n        ]\n        \n        for container_id, container_name, restart_count in containers:\n            # Start event\n            start_event = ContainerLifecycleEvent(\n                container_id=container_id,\n                container_name=container_name,\n                event_type=ContainerEvent.STARTED,\n                timestamp=base_time\n            )\n            collector.record_event(start_event)\n            \n            # Add restart events\n            for i in range(restart_count):\n                restart_event = ContainerLifecycleEvent(\n                    container_id=container_id,\n                    container_name=container_name,\n                    event_type=ContainerEvent.RESTARTED,\n                    timestamp=base_time + timedelta(minutes=i+1)\n                )\n                collector.record_event(restart_event)\n        \n        # Get statistics\n        stats = collector.get_restart_statistics()\n        \n        assert stats[\"total_containers\"] == 3\n        assert stats[\"containers_with_restarts\"] == 2\n        assert stats[\"total_restarts\"] == 3\n        assert stats[\"average_restarts_per_container\"] == 1.0\n        \n        # Check individual container stats\n        assert stats[\"containers\"][\"container1\"][\"restart_count\"] == 0\n        assert stats[\"containers\"][\"container2\"][\"restart_count\"] == 2\n        assert stats[\"containers\"][\"container3\"][\"restart_count\"] == 1\n    \n    def test_get_uptime_statistics(self, collector):\n        \"\"\"Test getting uptime statistics.\"\"\"\n        base_time = datetime.now()\n        \n        # Create a container and run it for some time\n        container_id = \"uptime_test\"\n        container_name = \"uptime-app\"\n        \n        start_event = ContainerLifecycleEvent(\n            container_id=container_id,\n            container_name=container_name,\n            event_type=ContainerEvent.STARTED,\n            timestamp=base_time\n        )\n        collector.record_event(start_event)\n        \n        stop_event = ContainerLifecycleEvent(\n            container_id=container_id,\n            container_name=container_name,\n            event_type=ContainerEvent.STOPPED,\n            timestamp=base_time + timedelta(hours=2)\n        )\n        collector.record_event(stop_event)\n        \n        # Get uptime statistics\n        stats = collector.get_uptime_statistics()\n        \n        assert stats[\"total_containers\"] == 1\n        assert stats[\"running_containers\"] == 0\n        assert stats[\"total_uptime_seconds\"] == 7200  # 2 hours\n        assert stats[\"average_uptime_seconds\"] == 7200\n        \n        container_stats = stats[\"containers\"][container_id]\n        assert container_stats[\"name\"] == container_name\n        assert container_stats[\"uptime_seconds\"] == 7200\n        assert container_stats[\"is_running\"] is False\n    \n    def test_clear_history(self, collector):\n        \"\"\"Test clearing event history.\"\"\"\n        base_time = datetime.now()\n        \n        # Add events for multiple containers\n        events = [\n            ContainerLifecycleEvent(\n                container_id=\"container1\",\n                container_name=\"app1\",\n                event_type=ContainerEvent.STARTED,\n                timestamp=base_time\n            ),\n            ContainerLifecycleEvent(\n                container_id=\"container2\",\n                container_name=\"app2\",\n                event_type=ContainerEvent.STARTED,\n                timestamp=base_time + timedelta(minutes=5)\n            ),\n            ContainerLifecycleEvent(\n                container_id=\"container1\",\n                container_name=\"app1\",\n                event_type=ContainerEvent.STOPPED,\n                timestamp=base_time + timedelta(minutes=10)\n            )\n        ]\n        \n        for event in events:\n            collector.record_event(event)\n        \n        assert len(collector.event_history) == 3\n        \n        # Clear events for specific container\n        cleared = collector.clear_history(container_id=\"container1\")\n        assert cleared == 2\n        assert len(collector.event_history) == 1\n        assert collector.event_history[0].container_id == \"container2\"\n        \n        # Clear all remaining events\n        cleared = collector.clear_history()\n        assert cleared == 1\n        assert len(collector.event_history) == 0\n    \n    def test_event_history_size_limit(self, collector):\n        \"\"\"Test that event history respects size limits.\"\"\"\n        collector.max_history_size = 5\n        \n        # Add more events than the limit\n        for i in range(10):\n            event = ContainerLifecycleEvent(\n                container_id=f\"container_{i}\",\n                container_name=f\"app_{i}\",\n                event_type=ContainerEvent.STARTED,\n                timestamp=datetime.now()\n            )\n            collector.record_event(event)\n        \n        # Should only keep the last 5 events\n        assert len(collector.event_history) == 5\n        assert collector.event_history[0].container_id == \"container_5\"\n        assert collector.event_history[-1].container_id == \"container_9\"\n    \n    @pytest.mark.asyncio\n    async def test_monitoring_lifecycle(self, collector):\n        \"\"\"Test starting and stopping monitoring.\"\"\"\n        # Mock container client\n        mock_client = Mock()\n        collector.container_client = mock_client\n        \n        # Start monitoring\n        await collector.start_monitoring()\n        assert collector._monitoring is True\n        assert collector._monitor_task is not None\n        \n        # Stop monitoring\n        await collector.stop_monitoring()\n        assert collector._monitoring is False\n    \n    @pytest.mark.asyncio\n    async def test_monitoring_without_client(self, collector):\n        \"\"\"Test monitoring behavior without container client.\"\"\"\n        # Should handle gracefully when no client is provided\n        await collector.start_monitoring()\n        assert collector._monitoring is False\n        assert collector._monitor_task is None\n    \n    def test_container_pause_unpause_events(self, collector, sample_container_id, sample_container_name):\n        \"\"\"Test handling pause and unpause events.\"\"\"\n        base_time = datetime.now()\n        \n        # Start container\n        start_event = ContainerLifecycleEvent(\n            container_id=sample_container_id,\n            container_name=sample_container_name,\n            event_type=ContainerEvent.STARTED,\n            timestamp=base_time\n        )\n        collector.record_event(start_event)\n        \n        # Pause container after 10 minutes\n        pause_event = ContainerLifecycleEvent(\n            container_id=sample_container_id,\n            container_name=sample_container_name,\n            event_type=ContainerEvent.PAUSED,\n            timestamp=base_time + timedelta(minutes=10)\n        )\n        collector.record_event(pause_event)\n        \n        state = collector.get_container_state(sample_container_id)\n        assert state.is_running is True  # Still running, just paused\n        assert state.current_uptime_start is None  # Uptime tracking paused\n        assert state.total_uptime == timedelta(minutes=10)\n        \n        # Unpause container after 5 more minutes\n        unpause_event = ContainerLifecycleEvent(\n            container_id=sample_container_id,\n            container_name=sample_container_name,\n            event_type=ContainerEvent.UNPAUSED,\n            timestamp=base_time + timedelta(minutes=15)\n        )\n        collector.record_event(unpause_event)\n        \n        state = collector.get_container_state(sample_container_id)\n        assert state.is_running is True\n        assert state.current_uptime_start == base_time + timedelta(minutes=15)\n        assert state.total_uptime == timedelta(minutes=10)  # Paused time not counted"