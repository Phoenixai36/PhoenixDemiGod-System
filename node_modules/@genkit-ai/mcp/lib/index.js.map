{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Genkit } from 'genkit';\nimport {\n  GenkitMcpClient,\n  McpClientOptions,\n  McpServerConfig,\n  McpStdioServerConfig,\n} from './client/client.js';\nimport { GenkitMcpHost, McpHostOptions } from './client/index.js';\nimport { GenkitMcpServer } from './server.js';\nexport {\n  GenkitMcpClient,\n  GenkitMcpHost,\n  type McpClientOptions,\n  type McpHostOptions,\n  type McpServerConfig,\n  type McpStdioServerConfig,\n};\n\nexport interface McpServerOptions {\n  /** The name you want to give your server for MCP inspection. */\n  name: string;\n  /** The version you want the server to advertise to clients. Defaults to\n   * 1.0.0. */\n  version?: string;\n}\n\n/**\n * Creates an MCP Client Host that connects to one or more MCP servers.\n * Each server is defined in the `mcpClients` option, where the key is a\n * client-side name for the server and the value is the server's configuration.\n *\n * By default, all servers in the config will be attempted to connect unless\n * their configuration includes `{disabled: true}`.\n *\n * ```ts\n * const clientHost = createMcpHost({\n *   name: \"my-mcp-client-host\", // Name for the host itself\n *   mcpServers: {\n *     // Each key is a name for this client/server configuration\n *     // Each value is an McpServerConfig object\n *     gitToolServer: { command: \"uvx\", args: [\"mcp-server-git\"] },\n *     customApiServer: { url: \"http://localhost:1234/mcp\" }\n *   }\n * });\n * ```\n *\n * @param options Configuration for the MCP Client Host, including the definitions of MCP servers to connect to.\n * @returns A new instance of GenkitMcpHost.\n */\nexport function createMcpHost(options: McpHostOptions) {\n  return new GenkitMcpHost(options);\n}\n\n/**\n * Creates an MCP Client that connects to a single MCP server.\n * This is useful when you only need to interact with one MCP server,\n * or if you want to manage client instances individually.\n *\n * ```ts\n * const client = createMcpClient({\n *   name: \"mySingleMcpClient\", // A name for this client instance\n *   command: \"npx\", // Example: Launching a local server\n *   args: [\"-y\", \"@modelcontextprotocol/server-everything\", \"/path/to/allowed/dir\"],\n * });\n *\n * // To get tools from this client:\n * // const tools = await client.getActiveTools(ai);\n * ```\n *\n * @param options Configuration for the MCP Client, defining how it connects\n *                to the MCP server and its behavior.\n * @returns A new instance of GenkitMcpClient.\n */\nexport function createMcpClient(options: McpClientOptions) {\n  return new GenkitMcpClient(options);\n}\n\n/**\n * Creates an MCP server based on the supplied Genkit instance. All tools and prompts\n * will be automatically converted to MCP compatibility.\n *\n * ```ts\n * const mcpServer = createMcpServer(ai, {name: 'my-mcp-server', version: '0.1.0'});\n *\n * await mcpServer.start(); // starts a stdio transport, OR\n * await mcpServer.start(customMcpTransport); // starts server using supplied transport\n * ```\n *\n * @param ai Your Genkit instance with registered tools and prompts.\n * @param options Configuration metadata for the server.\n * @returns GenkitMcpServer instance.\n */\nexport function createMcpServer(\n  ai: Genkit,\n  options: McpServerOptions\n): GenkitMcpServer {\n  return new GenkitMcpServer(ai, options);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA,oBAKO;AACP,IAAAA,iBAA8C;AAC9C,oBAAgC;AAyCzB,SAAS,cAAc,SAAyB;AACrD,SAAO,IAAI,6BAAc,OAAO;AAClC;AAsBO,SAAS,gBAAgB,SAA2B;AACzD,SAAO,IAAI,8BAAgB,OAAO;AACpC;AAiBO,SAAS,gBACd,IACA,SACiB;AACjB,SAAO,IAAI,8BAAgB,IAAI,OAAO;AACxC;","names":["import_client"]}